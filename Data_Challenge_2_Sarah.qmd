---
title: "Data Challange 2"
author: "Sarah Wirth"
date: "October/November/December 2024"
format: 
  html:
    embed-resources: true
    fig_caption: true
    fig-align: center
    highlight: tango
    number-sections: false
    theme: journal
    toc: true
    toc_depth: 2
    toc_float: true
execute:                      # Set global options for execution of code blocks
  echo: true
  warning: false
  message: false
---

```{r, echo=FALSE}
library(sf)
library(rnaturalearth)
library(igraph)
library(tidygraph)
library(tidyverse)
library(sfnetworks)
library(spdep)
library(reshape2)
library(dbscan)
```

# First part: Spatial Clustering ####
* **Task 1:** Describe the bicycle network. In particular, discuss properties that emerged in this week’s session, such as:
– What are the attributes of the nodes and edges?
– How many nodes and edges are present in the network?
– Do the edges have geometries themselves, or are they merely relations between nodes that possess geometries?
– Is the network connected? (Largely) planar? Weighted? Does it contain self-loops?


The nodes (n = 24191) only have a geometry of the type "Point" and no other attributes. The edges (n = 29694) have beside the geometry which is of the type "Linestring" other attributes "from" and "to" describing the nodes at which they start and end, a name which describes the name of the road like "Neptunstrasse", if a name is present and an osm_id, which is the Identity it got based on it being Openstreetmap- data. It further contains the attributes "highway", which contains information about the order of the street, as well as bridge and tunnel, which each show whether it is a bridge or tunnel by having a 1/NA subdivision depending on whether the edge is a bridge or a tunnel. The network is connected, largely planar except for some tunnels and bridges and is also not weighted and does not contain self-loops.


```{r, results='hide'}

biking_network <- readRDS("Session_6/biking_network.rds")
biking_network

 edges<-biking_network |> 
+   activate("edges") |> 
+   st_as_sf()
 
edges<-dplyr::mutate(edges, testloop = (from - to))
 
ggplot() +
  geom_sf(data=biking_network |>  activate(edges) |>  st_as_sf(), aes(color=highway), size=2) + 
  geom_sf(data=biking_network |>  activate(nodes) |>  st_as_sf())
```


* **Task 2:** Create a regular grid (hexagonal or rectangular, your choice) that covers the same area as the bike network. Your grid should have a suitable resolution. As a guideline, when overlaid on the bike network, your grid should be large enough to group nodes belonging to the same intersection together, while being small enough to separate the various districts (Quartiere). You can derive a suitable resolution from the bike network data, such as by using k-nearest-neighbour distances between intersections, or you can provide a rationale for your choice. In either case, please explain your reasoning. Finally, convert your grid into a valid spatial network using an appropriate definition of spatial neighbourhood.


```{r, results='hide'}

nodes<-biking_network |> 
  activate("nodes") |> 
  st_as_sf()


nodes_cor<-st_coordinates(nodes)
```

```{r}
kNNdistplot(nodes_cor, k=1)
abline(h = 100, col = "red")
abline(h = 75, col = "orange")
abline(h = 50, col = "darkgreen")
abline(h = 25, col = "blue")
abline(h = 10, col = "purple")
```


Looking at the kNN distance plot a grid distance in the range from 50m to 75m seems acceptable. To decide on which end I looked at the roads in the Niederdörfli, which has rather short streets and measured the distance between several intersections. After seeing, that the distances between the intersections are rather on the short side. I decided to create a grid with the resolution of 50m.
As i do not know what awaits me for the rest of the DC2, I decided to create a rectangular grid as well as a hexagonal grid and choose one later.

```{r}
bbox<-biking_network |>
  activate("edges") |>
  st_bbox()|> 
  sf::st_as_sfc()

hex_grid <- sf::st_make_grid(bbox, what = "polygons", 
                          cellsize = 50, square = FALSE, flat_topped = FALSE)

square_grid<- sf::st_make_grid(bbox, what = "polygons", 
                           cellsize = 50, square = TRUE)

ggplot() +
  geom_sf(data = hex_grid, color = "red") + 
  geom_sf(data = square_grid, color = "blue", fill = NA) + 
  coord_sf(datum = 2056)#slow code
```


