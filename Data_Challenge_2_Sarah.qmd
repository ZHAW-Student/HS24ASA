---
title: "Data Challange 2"
author: "Sarah Wirth"
date: "October/November/December 2024"
format: 
  html:
    embed-resources: true
    fig_caption: true
    fig-align: center
    highlight: tango
    number-sections: false
    theme: journal
    toc: true
    toc_depth: 2
    toc_float: true
execute:                      # Set global options for execution of code blocks
  echo: true
  warning: false
  message: false
---

```{r, echo=FALSE}
library(sf)
library(rnaturalearth)
library(igraph)
library(tidygraph)
library(tidyverse)
library(sfnetworks)
library(spdep)
library(reshape2)
library(dbscan)
library(leaflet)
library(tmap)
```

```{r, echo=FALSE}

biking_network <- readRDS("Session_6/biking_network.rds")
boundary <-st_read("Session2/Zurich_city_boundary_2024.gpkg")
districts <-st_read("Session2/Zurich_city_districts_2024.gpkg")
```


# First part: Spatial Clustering ####
* **Task 1:** Describe the bicycle network. In particular, discuss properties that emerged in this week’s session, such as:
– What are the attributes of the nodes and edges?
– How many nodes and edges are present in the network?
– Do the edges have geometries themselves, or are they merely relations between nodes that possess geometries?
– Is the network connected? (Largely) planar? Weighted? Does it contain self-loops?


The nodes (n = 24191) only have a geometry of the type "Point" and no other attributes. The edges (n = 29694) have beside the geometry which is of the type "Linestring" other attributes "from" and "to" describing the nodes at which they start and end, a name which describes the name of the road like "Neptunstrasse", if a name is present and an osm_id, which is the Identity it got based on it being Openstreetmap- data. It further contains the attributes "highway", which contains information about the order of the street, as well as bridge and tunnel, which each show whether it is a bridge or tunnel by having a 1/NA subdivision depending on whether the edge is a bridge or a tunnel. The network is connected, largely planar except for some tunnels and bridges and is also not weighted and does not contain self-loops.
undirected


```{r, results='hide'}
biking_network

edges<-biking_network |> 
  activate("edges") |> 
  st_as_sf()
 
edges<-dplyr::mutate(edges, testloop = (from - to))
 
# ggplot() +
#   geom_sf(data=biking_network |>  activate(edges) |>  st_as_sf(), aes(color=highway), size=2) + 
#   geom_sf(data=biking_network |>  activate(nodes) |>  st_as_sf())
```


* **Task 2:** Create a regular grid (hexagonal or rectangular, your choice) that covers the same area as the bike network. Your grid should have a suitable resolution. As a guideline, when overlaid on the bike network, your grid should be large enough to group nodes belonging to the same intersection together, while being small enough to separate the various districts (Quartiere). You can derive a suitable resolution from the bike network data, such as by using k-nearest-neighbour distances between intersections, or you can provide a rationale for your choice. In either case, please explain your reasoning. Finally, convert your grid into a valid spatial network using an appropriate definition of spatial neighbourhood.


```{r, results='hide'}
nodes<-biking_network |> 
  activate("nodes") |> 
  st_as_sf()

nodes_cor<-st_coordinates(nodes)
```

```{r}
kNNdistplot(nodes_cor, k=1)
abline(h = 100, col = "red")
abline(h = 75, col = "orange")
abline(h = 50, col = "darkgreen")
abline(h = 25, col = "blue")
abline(h = 10, col = "purple")
```


Looking at the kNN distance plot a grid distance in the range from 50m to 75m seems acceptable. To decide on which end I looked at the roads in the Niederdörfli, which has rather short streets and measured the distance between several intersections. After seeing, that the distances between the intersections are rather on the short side. I decided to create a grid with the resolution of 50m.
As i do not know what awaits me for the rest of the DC2, I decided to create a rectangular grid as well as a hexagonal grid and choose one later.

```{r}
bbox<-biking_network |>
  activate("edges") |>
  st_bbox()|> 
  sf::st_as_sfc()

hex_grid <- sf::st_make_grid(bbox, what = "polygons", 
                          cellsize = 50, square = FALSE, flat_topped = FALSE)

square_grid<- sf::st_make_grid(bbox, what = "polygons", 
                           cellsize = 50, square = TRUE)

# ggplot() +
#   geom_sf(data = hex_grid, color = "red") + 
#   geom_sf(data = square_grid, color = "blue", fill = NA) + 
#   coord_sf(datum = 2056)#slow code
```

# Second part: Network measures ####
* **Task 3:** Have you ever cycled in Zürich? Compute and plot the optimal path from the starting point to the endpoint of a cycling route you are familiar with. You can use the biking_network.rds provided in Session 06, or adapt the CycleNetwork.rmd to create your own network. Compare the route inferred by the network with your preferred route.


I have never cycled in Zürich as I do not live here and consider lots of spaces kind of dangerous for pedestrians and cyclists based on the aggressive driving style of some people. But i know the area from Wiedikon to the main station pretty well and can try to give a feedback to this.
```{r}
wiedikon_bhf <- st_point(c(2681935.48, 1247264.46)) |> 
  st_sfc(crs = 2056)

EuropaalleeHB <- st_point(c(2682882.50, 1248029.09)) |> 
  st_sfc(crs = 2056)

wiedikon_bhf_vertex <- st_nearest_feature(wiedikon_bhf, nodes)

EuropaalleeHB_vertex <- st_nearest_feature(EuropaalleeHB, nodes)

heigo_path <- shortest_paths(
  graph = biking_network,
  from = wiedikon_bhf_vertex,
  to = EuropaalleeHB_vertex,
  output = 'both')

# Turn the shortest path into a graph
heigo_graph <- biking_network |> 
    subgraph.edges(eids = heigo_path$epath |>  unlist(), 
                   delete.vertices = FALSE) |> 
    as_sfnetwork(node_key = "id")

```

```{r}
nodes_heigo<-nodes[c(3449,23269),]
nodes_heigo$name <-c("start","end")

ggplot() +
  geom_sf(data = districts[c(4,6,10,12),], fill = "lightgrey", color = "black")+
  geom_sf_text(data = districts[c(4,6,10,12),], aes(label = KNAME),  nudge_x = 100, size = 3)+
  geom_sf(data = heigo_graph |>  activate(edges) |> st_as_sf(), lwd = 1, col = 'orange') + 
  geom_sf(data = nodes_heigo|> st_as_sf(), size = 2, col = 'orange')+
  geom_sf_text(data = nodes_heigo|> 
                 st_as_sf(), aes(label = name),  nudge_x = 100, size = 3)+
  theme_void()

```



* **Task 4:** In a future week, we will estimate bike traffic based on network measures. This week, choose one network measure to inform your traffic estimates. You may use any network measure you wish, but you must justify your choice. Consider the following questions:

• Why is it reasonable to assume that the measure you choose correlates with the amount of bike traffic?

I chose the betweenness centrality as it should highlight places where bike traffic almost is forced through as they are the shortest path for many routes which should lead to more traffic in those areas.

• What potential problems might arise with this measure? For example, the network contains many
parallel paths in close proximity, which could influence measures that rely on shortest-path computations.

For this I assume, that cyclists do not avoid traffic hotspots, which i would absolutely do if I would have to cycle in Zürich. It also assumes that the speed of cyclists also is not affected by the slope of each path or speed limits.

Potential problems are that only the shortest path does only show the optimum but not other routes which are similarly suitable.


• Plot your chosen measure for the network.

```{r}
biking_network <- biking_network |> 
  activate(nodes) |>  
  mutate(btw = betweenness(biking_network))

nodes_btw<- biking_network |> 
  activate(nodes) 
```


```{r}
ggplot() +
  geom_sf(data = districts, fill = "lightgrey", color = NA) +
  # Plot the entire network
  geom_sf(data = biking_network |> activate(edges) |> as_tibble() |> st_as_sf(), 
          col = 'white') +
  geom_sf(data = biking_network |> activate(nodes) |> as_tibble() |> st_as_sf(), 
          aes(size=btw), col = "black")+
  theme_void()
```

```{r}
a<-st_as_sf(nodes_btw)

# leaflet() |>  addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  |> 
#  addCircleMarkers(data =a, radius = a$btw, color = "black", opacity = 1)
#######will crash r
```


* **Task 5:** A new bicycle infrastructure project, the “Stadttunnel” is under construction, connecting the coordinates (8.53619°E, 47.37768°N) with (8.53783°E, 47.38024°N) beneath the station. Analyse how this project affects the network measure you selected in Task 4, and visualise the changes. Depending on when you retrieved the data from OSM, the Stadttunnel might already be included in the network or not. If you encounter difficulties removing or adding the edge, please refer to the script remove_or_add_edge.r available on OLAT.

can be another statistic. should be applied to edges but not the whole network.

```{r}
Velotunnel<-filter(edges,name=="Velotunnel")
Velotunnel_compare <- st_transform(Velotunnel, crs=4326)
Velotunnel_compare$geometry


Velotunnel_real <- data.frame(
  name = c("Start Tunnel", "End Tunnel"),
  lon  = c(8.53619, 8.53783),
  lat  = c(47.37768, 47.38024),
  stringsAsFactors = FALSE)

Velotunnel_real_sf<- st_as_sf(Velotunnel_real, coords = c("lon", "lat"), 
                         crs = 4326)
   
leaflet() |>  addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  |> 
 addPolylines(data = Velotunnel_compare, color = "steelblue", weight = 2, opacity = 1, group = "Route") |> 
 addCircleMarkers(data =Velotunnel_real, radius = 2, color = "black", opacity = 1)
   
```

The tunnel is already present in the dataset although it does not quite end at one of the given coordinates.


##Removing the tunnel
```{r}
bbox_hb <- 
  st_sf(geom = st_sfc(st_point(c(8.5360556,  47.3798416)), 
                      st_point(c(8.5400802, 47.3770750))), crs = 4326) |>
  st_transform(crs = 2056) |>
  st_bbox() |>
  st_as_sfc()

# Locate the Stadttunnel
stadttunnel <- biking_network |> 
  activate(edges) |>
  st_as_sf() |>
  filter(tunnel == 1) |>
  filter(highway == "construction") |>
  st_filter(bbox_hb, .predicates = st_intersects)

# Use the unique from and to IDs from the previous query to remove the tunnel.
# (Explicitly specifying from and to is not strictly necessary but clarifies our intent.)

biking_network_no_stadttunnel <- biking_network |> 
  activate(edges) |> 
  filter(from != stadttunnel |> pull (from), 
         to != stadttunnel |> pull (to)) 

# Check if the Stadttunnel was successfully removed.
biking_network_no_stadttunnel |> 
  activate(edges) |>
  st_as_sf() |>
  filter(tunnel == 1)|>
  filter(highway == "construction") |>
  st_filter(bbox_hb, .predicates = st_intersects)

```

##Calculate Betweenness centrality for Network without the Stadttunnel
```{r}
biking_network_no_stadttunnel <- biking_network_no_stadttunnel |> 
  activate(nodes) |>  
  mutate(btw = betweenness(biking_network_no_stadttunnel))

nodes_btw_no_stadttunnel<- biking_network |> 
  activate(nodes) 
```

::: {.panel-tabset .nav-pills}
##Betweenness centrality for center of Zürich with the Stadttunnel
```{r}
ggplot() +
  geom_sf(data = districts, fill = "lightgrey", color = NA) +
  # Plot the entire network
  geom_sf(data = biking_network |> activate(edges) |> as_tibble() |> st_as_sf(), 
          col = 'white') +
  geom_sf(data = biking_network |> activate(nodes) |> as_tibble() |> st_as_sf(), 
          aes(size=btw), col = "black")+
  coord_sf(xlim = c(2682100, 2683680), ylim = c(1247700, 1248800), expand = FALSE)+
  theme_void()

```


##Betweenness centrality for center of Zürich without the Stadttunnel
```{r}
ggplot() +
  geom_sf(data = districts, fill = "lightgrey", color = NA) +
  # Plot the entire network
  geom_sf(data = biking_network_no_stadttunnel |> activate(edges) |> as_tibble() |> st_as_sf(), 
          col = 'white') +
  geom_sf(data = biking_network_no_stadttunnel |> activate(nodes) |> as_tibble() |> st_as_sf(), 
          aes(size=btw), col = "black")+
  coord_sf(xlim = c(2682100, 2683680), ylim = c(1247700, 1248800), expand = FALSE)+
  theme_void()

```
:::


##hier könnte man leaflet probieren---------------------------------------------------

The project strongly increases the betweeness centrality of the nodes at the Drahtschmidlisteg across the Limmat, the Sihlquai as well as the Kasernenstrasse on the southern side of the trainstation.

#Third part: Spatial Autocorrelation
Three weeks ago, we created a regular grid covering Zurich’s bike network (Task 2). Today, you will use this grid for further analysis. You will also need data on road accidents and Zurich’s tree inventory (“Baumkataster”).
The road accident data is available on Open Data Zurich (https://data.stadt-zuerich.ch/dataset/sid_dav_strassenverkehrsunfallorte). Filter this data to include only accidents involving bikes. If handling large datasets becomes challenging, you may exclude the category “Accident with property damage.” The tree inventory is accessible via Zurich’s Geodata portal (https://www.stadt-zuerich.ch/geodaten/download/Baumkataster). If processing the full inventory is difficult, feel free to use a representative or randomsubset of the tree data.

* **Task 6:**  Determine the number of bike accidents occurring in each grid cell. Use the function st_contains if your grid is made up of polygons, or st_nearest_feature if it consists of points. Plot the Getis-Ord Gi statistic to visualise accident counts per cell. Assess whether the results are significant and identify where accident hot spots are located. If you recognise the locations, consider whether the hot spots share common characteristics or features.

##Load data
```{r}
str(st_layers("Session_9/roadtrafficaccidentlocations.gpkg"))
accidents <- st_read("Session_9/roadtrafficaccidentlocations.gpkg")
bike_accidents <- accidents |> 
  filter(AccidentInvolvingBicycle == "true" , !AccidentSeverityCategory == "as4") # removing the property damage beforehand
bike_accidents<-st_zm(bike_accidents, drop = TRUE, what = "ZM")
st_crs(accidents)
  
str(st_layers("Session_9/Baumkataster/data/data.gpkg"))
baumkataster <-st_read("Session_9/Baumkataster/data/data.gpkg",layer="gsz.baumstandorte_k")
st_crs(baumkataster)

```

##Determine number of accidents per grid cell
```{r}
# grid to sf
hex_grid_sf <- st_as_sf(hex_grid, crs = 2056)

count_acc_hex <-st_contains( hex_grid_sf,bike_accidents)
counts <- lengths((count_acc_hex))

acc_in_hex <- hex_grid_sf
acc_in_hex$counts <- counts

# Calculate centroid and apply count to it
hex_centro <- st_centroid(hex_grid_sf)
hex_centro_acc <-st_join(hex_centro,acc_in_hex)

```


##Getis-Ord Gi
```{r}
neighbors <- knn2nb(knearneigh(st_coordinates(hex_centro_acc), k = 18))#to reduce computing effort we define the neigbors as only the 6 neighbor adjacent neigbor- cells

weights <- nb2listw(neighbors, style = "W", zero.policy = TRUE)

gi_values <- localG(hex_centro_acc$counts, listw = weights)
hex_centro_acc$gi_value <- gi_values

hex_centro_acc$gi_value_no_localG <- as.numeric(hex_centro_acc$gi_value)#get rid of local g class

#hex_centro_new <-st_within(hex_centro_acc,boundary)#takes way to long

hex_centro_acc_4326<- st_transform(hex_centro_acc, crs = 4326)

leaflet(hex_centro_acc_4326) |> 
  addProviderTiles("Esri.WorldTopoMap", group = "Terrain") |> 
  addCircleMarkers(
    color = ~colorNumeric("RdBu", hex_centro_acc_4326$gi_value_no_localG)(hex_centro_acc_4326$gi_value_no_localG),  # Farbskala
    fillOpacity = 0.7,
    radius = 3,
    stroke = FALSE,
    popup = ~paste("Gi-Wert: ", round(gi_value_no_localG, 2))) |>  
  addLegend(
    position = "bottomright",
    pal = colorNumeric("RdBu", hex_centro_acc_4326$gi_value_no_localG),
    values = hex_centro_acc_4326$gi_value_no_localG,
    title = "Getis-Ord Gi-Wert",
    opacity = 0.7)

tm_shape(districts) + 
  tm_borders() + 
  tm_shape(hex_centro_acc)+
  tm_dots("gi_value", palette = "RdBu") 

```


* **Task 7:** In a future task, we will predict bike traffic in the network, and for this, we want to check the number of trees along routes. Who knows, maybe cyclists prefer greener routes! For each network edge, count the number of trees nearby. Be careful to avoid double-counting the trees, and be sure to justify your definition of “nearby.”

Nearby according to me has to respect the width of each road, and that each road in the grid is represented by a line which is exactly following the mid of the width of the road. Then we only need to respect the width of roads on which bicycles should be used (we exclude Autostrasse and Autobahn). As I cannot account for the width of every single road I will orient it on the largest Roadtype bicycles can ride on (1. Klasse Strasse) which has a width of at least 6m. 

As I also do not want to calculate this on a distance, which would make it to computationally taxing, I have to make some compromises. Therefore I choose a distance of 4m, which allows trees along 1. Klasse roads to be included.

Double counting

all this can be found in counts.rmd of session 10

```{r}

sd<-st_is_within_distance(edges,baumkataster,dist = 8)#does not worl 

```


* **Task 8:** Also, for a future task, count the number of accidents along each network edge.

```{r}

```


#Fourth part: Spatial Autocorrelation
There are a few automatic bicycle traffic counters in Zurich and nearby municipalities. To
estimate traffic on all roads in the city, we want a regression model that best predicts the
counts at these locations. The traffic counts of the city are published online. The locations
of the counting machines is published on https://data.stadt-zuerich.ch/dataset/geo_standorte_
der_automatischen_fuss__und_velozaehlungen while the individual counts are in a big CSV
file: https://data.stadt-zuerich.ch/dataset/ted_taz_verkehrszaehlungen_werte_fussgaenger_velo/
download/2022_verkehrszaehlungen_werte_fussgaenger_velo.csv.
We provided the data for you in the file bike_counts_aggregated.rds. The script in counts.Rmd
shows how the count data were downloaded and mapped to the bike network.

##Load data
```{r}
bike_counts <- readRDS("Session_10/bike_counts_aggregated.rds")
```


* **Task 9:** Construct two different models to extrapolate bike traffic on Zurich’s roads. Base your models on the (potentially transformed) centrality measure you computed in Task 4. At least one of your two models should also use the (potentially transformed) tree counts per edge from Task 7. You may use additional predictors from my examples or whatever open data you can find elsewhere. I don’t expect you to go hunting, but if you have a good idea, I will be happy to see it and hopefully include it for future years.

##Betweenness centrality model linear model
```{r}
bclinear
```

##Tree based linear model
```{r}
bclineartree

```



* **Task 10:** Compare the two models using at least one quantitative model comparison method.
```{r}
BIC <- c(BIC(linear), BIC(loglinear), BIC(categorical), BIC(multivariate), BIC(extreme))
AIC <- c(AIC(linear), AIC(loglinear), AIC(categorical), AIC(multivariate), AIC(extreme))

model_performance <- data.frame(model = c("linear", "loglinear", "categorical", 
                                          "multivariate", "extreme"),
                                BIC = BIC, 
                                AIC = AIC)

```

```{r}
# Visualise the AIC and BIC for all models in a table
flextable(model_performance) 
```


* **Task 11:** You counted the number of accidents along each network edge in Task 8. Apply Poisson regression to predict the number of bike accidents along each edge based on the (potentially transformed) centrality measure you computed in Task 4. Based on the model’s prediction, visualize the predicted probability that no accident occurs along each network edge.


```{r}

```


#Fifth part: Spatial Regression
This week, you will perform spatial regression to predict the number of accidents on the bicycle network. However, spatial regression models (both spatial lag and error models) require a huge amount of computation time and memory space, and it is probably difficult to analyze the whole network. In the following tasks, you can focus on some regions or districts of the city of Zurich so that you can finish your task within a practical computation time.

* **Task 12:**  Construct a linear regression model to predict the number of accidents along network edges based on centrality measures and/or tree counts. You can freely transform variables and add other independent variables to seek a better model. Are the residuals spatially autocorrelated? (Note: Since the number of accidents is count data, Poisson regression makes more sense than simple linear regression, as you did in Task 11. However, use a simple linear regression model for this task so that you can compare the model performance against spatial regression models in Task 13).

```{r}
#first we plot the data

#transform variables, which could improve model fit

#plot data again 

#create different models
lm_betweenness <-lm(formula = accident ~ betweenness, data = data)
lm_trees <-lm(formula = accident ~ trees, data = data)
lm_betweenness_trees <-lm(formula = accident ~ betweenness + trees, data = data)

```

```{r}
#compare models and choose best model
BIC <- c(BIC(linear), BIC(loglinear), BIC(categorical), BIC(multivariate), BIC(extreme))
AIC <- c(AIC(linear), AIC(loglinear), AIC(categorical), AIC(multivariate), AIC(extreme))

model_performance <- data.frame(model = c("linear", "loglinear", "categorical", 
                                          "multivariate", "extreme"),
                                BIC = BIC, 
                                AIC = AIC)
```

```{r}
#check for spatial autocorrelation of best model
# Extract residuals and bin them 
residuals_lm_leukaemia <- residuals(lm_leukaemia) %>%
  as_tibble |>
  setNames("residuals") |>
  mutate(id = row_number()) |>
  mutate(binned_residuals = cut_interval(residuals, n = 8))

# Join with the polygons of upstate New York
leukaemia_up_ny <- full_join(leukaemia_up_ny, 
                             residuals_lm_leukaemia, by = "id")

# Plot the residuals
ggplot(leukaemia_up_ny) +
  geom_sf(aes(fill = binned_residuals)) + 
  theme_minimal() +
  scale_fill_brewer(name='Residuals',
                    palette="PRGn") +
  theme(axis.title=element_blank())

# Contiguity neighbours
up_ny_nb <- poly2nb(leukaemia_up_ny)

# Binary spatial weights
up_ny_weights <- nb2listw(up_ny_nb, style = "B")

# Moran's I 
morans_I_residuals <- lm.morantest(lm_leukaemia, listw = up_ny_weights,
                                   alternative = "greater")

morans_I_residuals
```


* **Task 13:** Apply a spatial regression model (spatial lag, spatial error, or both) using the same independent variables. Compare the spatial regression model to the simple linear regression model from Task 12.

```{r}
#spatial_lag
lag_leukaemia <- lagsarlm (formula = Z ~ PEXPOSURE + PCTAGE65P + PCTOWNHOME, 
                           data = leukaemia_up_ny, listw = up_ny_weights)

summary(lag_leukaemia )
```

```{r}
#spatial_error
ser_leukaemia  <- spautolm(formula = Z ~ PEXPOSURE + PCTAGE65P + PCTOWNHOME, data = leukaemia_up_ny, 
                      listw = up_ny_weights)

summary(ser_leukaemia )
```


```{r}
#comparison of models
BIC <- c(BIC(linear), BIC(loglinear), BIC(categorical), BIC(multivariate), BIC(extreme))
AIC <- c(AIC(linear), AIC(loglinear), AIC(categorical), AIC(multivariate), AIC(extreme))

model_performance <- data.frame(model = c("linear", "loglinear", "categorical", 
                                          "multivariate", "extreme"),
                                BIC = BIC, 
                                AIC = AIC)

```


#Sixth part: Spatial Autocorrelation

* **Task 14:** Define a (linear) mixed effects model to predict the number of accidents at an edge of the bicycle network from the (edge) centrality. You can freely transform variables and add other independent variables like the tree count. As groups for the random effects you can use the different road types (the highway property of the edges).
Note: Observations with NA values are simply omitted by the lmer() function. You could instead treat them as a separate group using replace_na

```{r}

```

