---
title: "Ex2_Sarah"
author: "Sarah Wirth"
date: "25.09.2024"
format: 
  html:
    fig_caption: true
    fig-align: center
    highlight: tango
    number-sections: false
    theme: flatly
    toc: true
    toc_depth: 2
    toc_float: true

execute:                     
  echo: true
  warning: false
  message: false
---
```{r}
library(dplyr)
library(ggplot2)
library(lubridate)
```

# First part: Spatial Clustering ####

* **Task 0:** Create a new R Project and new R Script using a clean template and initialization of the environment. We recommend you use RMarkdown with HTML as target output.

* **Task 1:** Download and import the road accident data from Open Data Zurich (ODZ) using an appropriate file format. If needed, transform to the Swiss projected CH1903+/LV95 coordinate system (EPSG = 2056).
```{r, echo = FALSE, message = FALSE}


accidents <- sf::st_read("Session_2/roadtrafficaccidentlocations.gpkg")


boundary <-sf::st_read("Session_2/Zurich_city_boundary_2024.gpkg")

districts <-sf::st_read("Session_2/Zurich_city_districts_2024.gpkg")

```

* **Task 2:** Report the following numbers in table(s):
  a. Number of accidents by accident severity category
  b. Number of accidents by accident type
  c. Number of accidents involving pedestrians, bicycles, and motorcycles, respectively. And combinations thereof (pedestrian AND bicycle, pedestrian AND motorcycle etc.). Are there any accidents involving all three modes (pedestrian, bicycle, motorcycle)? no
  
  
```{r, echo = FALSE, message = FALSE}
numsev<-accidents |> 
  count(AccidentSeverityCategory_en)

numtype <- accidents |> 
  count(AccidentType_en)

numped <- accidents |> 
  count(AccidentInvolvingPedestrian)

numbi <- accidents |> 
  count(AccidentInvolvingBicycle)

nummot <- accidents |> 
  count(AccidentInvolvingMotorcycle)

numpedbimot <- accidents |> 
  group_by(AccidentInvolvingBicycle, AccidentInvolvingMotorcycle, AccidentInvolvingPedestrian) |> 
  summarise(n=n())

```



* **Task 3:** Generate a plot showing the temporal evolution of the number of accidents from 2011 to 2023. Label each year with the corresponding number of accidents. Choose a plot type that is suitable for this type of temporal data. Bonus: Show also the data for the bicycle accidents (cf. Task 4) in the same plot.
```{r, echo = FALSE, message = FALSE}
numyearbi <- accidents |> group_by(AccidentYear, AccidentInvolvingBicycle) |> 
  summarise(n=n())

numyear <- numyearbi |> group_by(AccidentYear)  |> 
  summarise(n=n())
  
ggplot(numyearbi, aes(x=AccidentYear, y=n,fill=AccidentInvolvingBicycle)) +
  geom_bar(position="stack", stat="identity")+
  xlab("Year")+
  ylab("")+
  guides(fill=guide_legend(title="Bicycle"))

```

* **Task 4:** Select only those accidents that involved a bicycle. **From now on, and for the remainder of DC1, we will restrict our analysis to the accidents involving bicycles.** With this subset, produce a map showing the bicycle accident data colored by accident severity category. Use a basemap such as OpenStreetMap and/or the boundary data available on OLAT, so the accidents can be visually and spatially referenced.
```{r, echo = FALSE, message = FALSE}
onlybikes <-accidents |>  
  filter(AccidentInvolvingBicycle== "true")#7425 obs

cols<- c("Accident with fatalities" ="red", "Accident with light injuries"="yellow","Accident with property damage"= "blue", "Accident with severe injuries"="orange")


ggplot()+
  geom_sf(data=boundary, aes(color="white"))+
  geom_sf(data=onlybikes, aes(color=factor(AccidentSeverityCategory_en)))+
  scale_colour_manual(values = cols)+
  theme(legend.position="none")

```

* **Task 5:** Imagine you are given the task of detecting spatial clusters of elevated bicycle accident occurrence (without considering their severity). How would you characterize such "bicycle accident clusters"? Try to define properties that can be used to describe and identify such clusters, and that can be used to choose and parameterize a clustering method suitable for the task. Try to use natural, but precise and concise language in your answer.


How: use optics as dbscan is insufficient for rural data
Properties: the accidents occur along road networks and are tied to different hours of day, different visibility, different traffic (also dependent on time). Possible clusters have varying densities and do rarely occur within forests (there probably is a reporting- bias)



* **Task 6:** From the bicycle accidents, extract the years 2018 to 2021 and compute clusters for each year separately, using a clustering method you deem appropriate for the task, and choose the control parameters appropriately to capture the types of clusters you had in mind in your definition of Task 5. Justify your choice.
```{r, echo = FALSE, message = FALSE}
onlybikes18 <- sf::st_coordinates(onlybikes |> 
  filter (AccidentYear ==2018))

onlybikes19 <-  sf::st_coordinates(onlybikes |> 
  filter (AccidentYear ==2019))

onlybikes20 <- sf::st_coordinates( onlybikes |> 
  filter (AccidentYear ==2020))

onlybikes21 <- sf::st_coordinates(onlybikes |> 
  filter (AccidentYear ==2021))


library("cluster")
library("dbscan")
library("fpc")
library("seriation")
library("mlbench")
library("spatgraphs")

dbscan::kNNdistplot(onlybikes18, k = 3)
graphics::abline(h = 500, col = "red")

dbscan::kNNdistplot(onlybikes19, k = 3)
graphics::abline(h = 500, col = "red")

dbscan::kNNdistplot(onlybikes20, k = 3)
graphics::abline(h = 500, col = "red")

dbscan::kNNdistplot(onlybikes21, k = 3)
graphics::abline(h = 500, col = "red")

#500 seems to be ok overall


db18 <- dbscan::dbscan(onlybikes18, eps = 500, minPts = 3)
db18

db19 <- dbscan::dbscan(onlybikes19, eps = 500, minPts = 3)
db19

db20 <- dbscan::dbscan(onlybikes20, eps = 500, minPts = 3)
db20

db21 <- dbscan::dbscan(onlybikes21, eps = 500, minPts = 3)
db21

```

```{r, echo = FALSE, message = FALSE}
plot(onlybikes18, pch = 19, cex = 0.5, col = db18$cluster + 1, asp = 1)
title(main="2018")

plot(onlybikes19, pch = 19, cex = 0.5, col = db19$cluster + 1, asp = 1)
title(main="2019")

plot(onlybikes20, pch = 19, cex = 0.5, col = db20$cluster + 1, asp = 1)
title(main="2020")

plot(onlybikes21, pch = 19, cex = 0.5, col = db21$cluster + 1, asp = 1)
title(main="2021")

```


* **Task 7**: Discuss your results, including also limitations or problems, and possible other methods that you could have used.


Overall its difficult to separate it. But the threshold of 500m seems appropriate. In all cases the exterior districts are separated from the central area through different forest- areas and other rural zones. If I would like to look closer at the differences in the city center i would need a lower threshold or network data.

# Second part: Polygon Delineation ####
* **Task 8**: Given the clusters that you have extracted in Part 1 of the DC1 assignment:
  a. Define a set of criteria that a method should fulfill that can be used to delineate the given clusters by polygons. Use free text for these definitions, but try to be concise and precise. (Note: These criteria can also be used in the subsequent Discussion to evaluate whether they have been met.)
  
It should be capable to account for the concave indents in the clusters. The clusters should not overlap (within a year).
  
  b. Choose a polygon delineation method that you deem appropriate in light of the above
criteria. Justify your choice.

I will use Concave hull as a delineation method, as it does account for the concave shape, but will not make holes in the clusters.


* **Task 9**: From the years 2018 to 2021 for which you computed clusters in Task 6, choose at least two years and apply your polygon delineation method of choice to each of these two years separately. Compute the Jaccard Index (aka Intersection over Union) for pair(s) of selected years and present and discuss the results.

```{r, echo = FALSE, message = FALSE}

#add cluster-id to each year
db18_c<- st_as_sf(as.data.frame(cbind(onlybikes18, db18$cluster)),coords = c("X", "Y"),
    crs = 2056)
db19_c<- st_as_sf(as.data.frame(cbind(onlybikes19, db19$cluster)),coords = c("X", "Y"),
    crs = 2056)
db20_c<- st_as_sf(as.data.frame(cbind(onlybikes20, db20$cluster)),coords = c("X", "Y"),
    crs = 2056)
db21_c<- st_as_sf(as.data.frame(cbind(onlybikes21, db21$cluster)),coords = c("X", "Y"),
    crs = 2056)

#comparison of plots
plot(x=db18_c$X, y=db18_c$Y, pch = 19, cex = 0.5, col = db18_c$V4 + 1, asp = 1)
title(main="2018")
plot(onlybikes18, pch = 19, cex = 0.5, col = db18$cluster + 1, asp = 1) #looks good

#split each set into clusters
  #0 is left out as it could not be clustered
db18_c_1 <- db18_c |>  filter(V4 == "1") 
db18_c_2 <- db18_c |>  filter(V4 == "2") 
db18_c_3 <- db18_c |>  filter(V4 == "3") 
db18_c_4 <- db18_c |>  filter(V4 == "4") 
db18_c_5 <- db18_c |>  filter(V4 == "5") 
db18_c_6 <- db18_c |>  filter(V4 == "6") 
db18_c_7 <- db18_c |>  filter(V4 == "7") 
db18_c_8 <- db18_c |>  filter(V4 == "8") 

#compute clusters per id
library(concaveman)
#the concavity is defined based on the biggest cluster of points
db18_c_1_c <- concaveman::concaveman(db18_c_1,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_1_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_1, color = "black", size = 0.2) +
  coord_sf(datum = 2056)

#2
db18_c_2_c <- concaveman::concaveman(db18_c_2,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_2_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_2, color = "black", size = 0.2) +
  coord_sf(datum = 2056)
#3
db18_c_3_c <- concaveman::concaveman(db18_c_3,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_3_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_3, color = "black", size = 0.2) +
  coord_sf(datum = 2056)
#4
db18_c_4_c <- concaveman::concaveman(db18_c_4,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_4_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_4, color = "black", size = 0.2) +
  coord_sf(datum = 2056)
#5
db18_c_5_c <- concaveman::concaveman(db18_c_5,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_5_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_5, color = "black", size = 0.2) +
  coord_sf(datum = 2056)
#6
db18_c_1_c <- concaveman::concaveman(db18_c_1,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_1_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_1, color = "black", size = 0.2) +
  coord_sf(datum = 2056)
#7
db18_c_1_c <- concaveman::concaveman(db18_c_1,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_1_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_1, color = "black", size = 0.2) +
  coord_sf(datum = 2056)
#8
db18_c_1_c <- concaveman::concaveman(db18_c_1,concavity = 2, length_threshold = 0)

ggplot() +
  geom_sf(data = db18_c_1_c,  color = "blue", fill = NA, alpha = 0.1) +
  geom_sf(data = db18_c_1, color = "black", size = 0.2) +
  coord_sf(datum = 2056)
```


* **Task 10**: Overall, what did you find with the above steps? What do these steps tell you about the situation of bicycle accidents in Zurich? How useful are the methods used so far in analysing the given data? Any other points of note?

Connecting those points to a road-network or data about the road- network would be helpful.


# Third part of DC1 ####


# Fourth part of DC1 ####

# Fifth part of DC1 ####


